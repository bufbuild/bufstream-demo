// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bufbuild/bufstream_demo/v1/service.proto

package bufstream_demov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/bufstream-demo/gen/bufbuild/bufstream_demo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EmailServiceName is the fully-qualified name of the EmailService service.
	EmailServiceName = "bufbuild.bufstream_demo.v1.EmailService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EmailServiceGetEmailProcedure is the fully-qualified name of the EmailService's GetEmail RPC.
	EmailServiceGetEmailProcedure = "/bufbuild.bufstream_demo.v1.EmailService/GetEmail"
	// EmailServiceUpdateEmailProcedure is the fully-qualified name of the EmailService's UpdateEmail
	// RPC.
	EmailServiceUpdateEmailProcedure = "/bufbuild.bufstream_demo.v1.EmailService/UpdateEmail"
	// EmailServiceToggleVerifierProcedure is the fully-qualified name of the EmailService's
	// ToggleVerifier RPC.
	EmailServiceToggleVerifierProcedure = "/bufbuild.bufstream_demo.v1.EmailService/ToggleVerifier"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	emailServiceServiceDescriptor              = v1.File_bufbuild_bufstream_demo_v1_service_proto.Services().ByName("EmailService")
	emailServiceGetEmailMethodDescriptor       = emailServiceServiceDescriptor.Methods().ByName("GetEmail")
	emailServiceUpdateEmailMethodDescriptor    = emailServiceServiceDescriptor.Methods().ByName("UpdateEmail")
	emailServiceToggleVerifierMethodDescriptor = emailServiceServiceDescriptor.Methods().ByName("ToggleVerifier")
)

// EmailServiceClient is a client for the bufbuild.bufstream_demo.v1.EmailService service.
type EmailServiceClient interface {
	GetEmail(context.Context, *connect.Request[v1.GetEmailRequest]) (*connect.Response[v1.GetEmailResponse], error)
	UpdateEmail(context.Context, *connect.Request[v1.UpdateEmailRequest]) (*connect.Response[v1.UpdateEmailResponse], error)
	ToggleVerifier(context.Context, *connect.Request[v1.ToggleVerifierRequest]) (*connect.Response[v1.ToggleVerifierResponse], error)
}

// NewEmailServiceClient constructs a client for the bufbuild.bufstream_demo.v1.EmailService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmailServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EmailServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &emailServiceClient{
		getEmail: connect.NewClient[v1.GetEmailRequest, v1.GetEmailResponse](
			httpClient,
			baseURL+EmailServiceGetEmailProcedure,
			connect.WithSchema(emailServiceGetEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateEmail: connect.NewClient[v1.UpdateEmailRequest, v1.UpdateEmailResponse](
			httpClient,
			baseURL+EmailServiceUpdateEmailProcedure,
			connect.WithSchema(emailServiceUpdateEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		toggleVerifier: connect.NewClient[v1.ToggleVerifierRequest, v1.ToggleVerifierResponse](
			httpClient,
			baseURL+EmailServiceToggleVerifierProcedure,
			connect.WithSchema(emailServiceToggleVerifierMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// emailServiceClient implements EmailServiceClient.
type emailServiceClient struct {
	getEmail       *connect.Client[v1.GetEmailRequest, v1.GetEmailResponse]
	updateEmail    *connect.Client[v1.UpdateEmailRequest, v1.UpdateEmailResponse]
	toggleVerifier *connect.Client[v1.ToggleVerifierRequest, v1.ToggleVerifierResponse]
}

// GetEmail calls bufbuild.bufstream_demo.v1.EmailService.GetEmail.
func (c *emailServiceClient) GetEmail(ctx context.Context, req *connect.Request[v1.GetEmailRequest]) (*connect.Response[v1.GetEmailResponse], error) {
	return c.getEmail.CallUnary(ctx, req)
}

// UpdateEmail calls bufbuild.bufstream_demo.v1.EmailService.UpdateEmail.
func (c *emailServiceClient) UpdateEmail(ctx context.Context, req *connect.Request[v1.UpdateEmailRequest]) (*connect.Response[v1.UpdateEmailResponse], error) {
	return c.updateEmail.CallUnary(ctx, req)
}

// ToggleVerifier calls bufbuild.bufstream_demo.v1.EmailService.ToggleVerifier.
func (c *emailServiceClient) ToggleVerifier(ctx context.Context, req *connect.Request[v1.ToggleVerifierRequest]) (*connect.Response[v1.ToggleVerifierResponse], error) {
	return c.toggleVerifier.CallUnary(ctx, req)
}

// EmailServiceHandler is an implementation of the bufbuild.bufstream_demo.v1.EmailService service.
type EmailServiceHandler interface {
	GetEmail(context.Context, *connect.Request[v1.GetEmailRequest]) (*connect.Response[v1.GetEmailResponse], error)
	UpdateEmail(context.Context, *connect.Request[v1.UpdateEmailRequest]) (*connect.Response[v1.UpdateEmailResponse], error)
	ToggleVerifier(context.Context, *connect.Request[v1.ToggleVerifierRequest]) (*connect.Response[v1.ToggleVerifierResponse], error)
}

// NewEmailServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmailServiceHandler(svc EmailServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	emailServiceGetEmailHandler := connect.NewUnaryHandler(
		EmailServiceGetEmailProcedure,
		svc.GetEmail,
		connect.WithSchema(emailServiceGetEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	emailServiceUpdateEmailHandler := connect.NewUnaryHandler(
		EmailServiceUpdateEmailProcedure,
		svc.UpdateEmail,
		connect.WithSchema(emailServiceUpdateEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	emailServiceToggleVerifierHandler := connect.NewUnaryHandler(
		EmailServiceToggleVerifierProcedure,
		svc.ToggleVerifier,
		connect.WithSchema(emailServiceToggleVerifierMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bufbuild.bufstream_demo.v1.EmailService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EmailServiceGetEmailProcedure:
			emailServiceGetEmailHandler.ServeHTTP(w, r)
		case EmailServiceUpdateEmailProcedure:
			emailServiceUpdateEmailHandler.ServeHTTP(w, r)
		case EmailServiceToggleVerifierProcedure:
			emailServiceToggleVerifierHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmailServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmailServiceHandler struct{}

func (UnimplementedEmailServiceHandler) GetEmail(context.Context, *connect.Request[v1.GetEmailRequest]) (*connect.Response[v1.GetEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bufbuild.bufstream_demo.v1.EmailService.GetEmail is not implemented"))
}

func (UnimplementedEmailServiceHandler) UpdateEmail(context.Context, *connect.Request[v1.UpdateEmailRequest]) (*connect.Response[v1.UpdateEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bufbuild.bufstream_demo.v1.EmailService.UpdateEmail is not implemented"))
}

func (UnimplementedEmailServiceHandler) ToggleVerifier(context.Context, *connect.Request[v1.ToggleVerifierRequest]) (*connect.Response[v1.ToggleVerifierResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bufbuild.bufstream_demo.v1.EmailService.ToggleVerifier is not implemented"))
}
